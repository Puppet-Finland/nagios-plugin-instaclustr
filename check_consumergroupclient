#!/usr/bin/ruby
# frozen_string_literal: true

require 'rest-client'
require 'json'
require 'getoptlong'

# Nagios plugin for getting metrics from InstaClustr
class InstaClustrMetrics
  attr_accessor :value, :timeout, :hostname, :user, :password, :warn_threshold, :crit_threshold

  # See https://www.instaclustr.com/support/api-integrations/api-reference/monitoring-api/kafka-metrics/
  attr_accessor :metric, :cluster_id, :consumer_group, :client_id, :topic

  def initialize
    @valid_metrics = ['consumercount','consumerlag','partitioncount']
  end

  def validate_metric
    @valid_metrics.include?(@metric.downcase)
  end

  def connect
    response = RestClient::Request.new(
      method: :get,
      url: "https://#{@hostname}/monitoring/v1/clusters/#{@cluster_id}/kafka/consumerGroupClientMetrics?consumerGroup=#{@consumer_group}&topic=#{topic}&metrics=#{@metric}&clientID=#{@client_id}", # rubocop:disable Layout/LineLength
      user: @user,
      password: @password,
      verify_ssl: true
    ).execute

    results = JSON.parse(response.to_str)
    @value = results[0]['payload'][0]['values'][0]['value'].to_i
  end

  def result
    connect
    @value
  end

  def nagios_print_critical
    print "CRITICAL - Kafka #{@metric} #{@value} for topic #{topic} "
    print "exceeds the threshold of #{crit_threshold}! | #{@metric}=#{@value};;;;\n"
    exit 2
  end

  def nagios_print_warning
    print "WARNING - Kafka #{@metric} #{@value} for topic #{topic} "
    print "exceeds the threshold of #{warn_threshold}! | #{@metric}=#{@value};;;;\n"
    exit 1
  end

  def nagios_print_ok
    print "OK - Kafka #{@metric} is #{@value} for topic #{topic} |"
    print " #{@metric}=#{@value};;;;\n"
  end
end

def help(retval=0)
  print 'Usage: ./check_consumergroupclient -H api.instaclustr.com -w 300 -c 600 -u <instaclustr-username> -p <password> '
  print '-C <cluster-id> -g <consumer-group> -t <topic> -i <client-id> -m <metric>'
  puts
  puts 'Valid metrics are consumercount, consumerlag and partitioncount.'
  exit retval
end

help if ARGV.empty?

opts = GetoptLong.new(
  ['--hostname', '-H', GetoptLong::REQUIRED_ARGUMENT],
  ['--help', '-h', GetoptLong::NO_ARGUMENT],
  ['--warning', '-w', GetoptLong::REQUIRED_ARGUMENT],
  ['--critical', '-c', GetoptLong::REQUIRED_ARGUMENT],
  ['--user', '-u', GetoptLong::REQUIRED_ARGUMENT],
  ['--password', '-p', GetoptLong::REQUIRED_ARGUMENT],
  ['--cluster_id', '-C', GetoptLong::REQUIRED_ARGUMENT],
  ['--consumer_group', '-g', GetoptLong::REQUIRED_ARGUMENT],
  ['--client_id', '-i', GetoptLong::REQUIRED_ARGUMENT],
  ['--topic', '-t', GetoptLong::REQUIRED_ARGUMENT],
  ['--metric', '-m', GetoptLong::REQUIRED_ARGUMENT]
)

i = InstaClustrMetrics.new

opts.each do |opt, arg|
  begin
    case opt
    when '--hostname', '-H'
      i.hostname = arg
    when '--help', '-h'
      help
    when '--warning', '-w'
      i.warn_threshold = arg.to_i
    when '--critical', '-c'
      i.crit_threshold = arg.to_i
    when '--user', '-u'
      i.user = arg
    when '--password', '-p'
      i.password = arg
    when '--cluster_id', '-C'
      i.cluster_id = arg
    when '--consumer_group', '-g'
      i.consumer_group = arg
    when '--client_id', '-i'
      i.client_id = arg
    when '--topic', '-T'
      i.topic = arg
    when '--metric', '-m'
      i.metric = arg
    end
  end
end

unless i.validate_metric
  help(3)
end

if i.result > i.crit_threshold
  i.nagios_print_critical
elsif i.result > i.warn_threshold
  i.nagios_print_warning
else
  i.nagios_print_ok
end
